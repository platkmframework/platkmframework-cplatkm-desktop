/**
 * ****************************************************************************
 *  Copyright(c) 2025 the original author Eduardo Iglesias Taylor.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  	 https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  Contributors:
 *  	Eduardo Iglesias Taylor - initial API and implementation
 * *****************************************************************************
 */
package org.platkmframework.cplatkm.desktop.panels.runconfigurations;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.platkmframework.cplatkm.desktop.core.CGeneratorContentManager;

/**
 *
 * @author Eduardo Iglesias
 */
public class RunConfigTemplatePathJDialog extends javax.swing.JDialog {

    public boolean updated;
    public String relativePath;
    public String rootPath;
    DefaultTableModel tableModel;
    
    /**
     * Creates new form RunConfigTemplatePathJDialog
     */
    public RunConfigTemplatePathJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(CGeneratorContentManager.getInstance().getMainFrame());
        
        tableModel = new DefaultTableModel(new Object[]{"Root Path", "Package Name"}, 0){
            
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblTemplatePaths.setModel(tableModel);
      
        btnCreatePath.addActionListener(e -> {
            int selectedRow = tblTemplatePaths.getSelectedRow();
            if (selectedRow != -1) {
                String selectedPath = (String) tableModel.getValueAt(selectedRow, 0);
                String packageName = JOptionPane.showInputDialog(parent, "Package name should not be empty:", "New Package", JOptionPane.PLAIN_MESSAGE);

                if (packageName != null && !packageName.trim().isEmpty()) {
                    File newPackage = new File(rootPath + File.separator + selectedPath + File.separator + packageName);
                    if (newPackage.mkdir()) {
                        JOptionPane.showMessageDialog(parent, "Package created.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        refreshTableData();
                        
                        tableModel.addRow(new Object[]{newPackage.getAbsolutePath().replace(selectedPath, ""), packageName});
                    } else {
                        JOptionPane.showMessageDialog(parent, "The process could´nt create the package.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(parent, "Select a current package first.", "Create Package", JOptionPane.WARNING_MESSAGE);
            }
        });
        
        tblTemplatePaths.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int selectedRow = tblTemplatePaths.getSelectedRow();
                    if (selectedRow >=0) {
                        updated = true;
                        relativePath = tblTemplatePaths.getValueAt(selectedRow, 0).toString();
                        setVisible(false);
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTemplatePaths = new javax.swing.JTable();
        btnCreatePath = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblRootPath = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Package selector");

        tblTemplatePaths.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Root Path", "Package Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTemplatePaths);

        btnCreatePath.setText("Create Package");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCreatePath)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCreatePath)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText("Root Path");

        lblRootPath.setText("<Root path>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRootPath, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblRootPath))
                .addContainerGap(272, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(2, 2, 2)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunConfigTemplatePathJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunConfigTemplatePathJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunConfigTemplatePathJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunConfigTemplatePathJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RunConfigTemplatePathJDialog dialog = new RunConfigTemplatePathJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRootPath;
    private javax.swing.JTable tblTemplatePaths;
    // End of variables declaration//GEN-END:variables

    void setData(String rootPath, String relativePath) {
        this.updated = false;
        this.rootPath = rootPath;
        this.relativePath = relativePath;
        this.lblRootPath.setText(rootPath);
        
        refreshTableData();
        
    }
    
    void refreshTableData(){
        tableModel.setRowCount(0); // Limpiar tabla
        File folder = new File(rootPath);
        // Listar todas las subcarpetas recursivamente a partir de la carpeta seleccionada
        int selectedRow = listSubfolders(folder, tableModel, folder.getAbsolutePath(), -1);
        if(selectedRow >-1){
            tblTemplatePaths.setRowSelectionInterval(selectedRow, selectedRow); // Seleccionar la fila
            tblTemplatePaths.scrollRectToVisible(tblTemplatePaths.getCellRect(selectedRow, 0, true)); // Asegurarse de que sea visible
        }
    }
    
    private int listSubfolders(File folder, DefaultTableModel tableModel, String basePath, int selectedRow) {
        File[] files = folder.listFiles();
        if (files != null) {
            String auxRelativePath;
            for (File file : files) {
                if (file.isDirectory()) {
                    auxRelativePath = file.getAbsolutePath().replace(basePath + File.separator, "");
                    tableModel.addRow(new Object[]{auxRelativePath, file.getName()});
                    if(auxRelativePath.equals(this.relativePath)){
                        selectedRow = tableModel.getRowCount()-1;
                    }
                    int subIndex = listSubfolders(file, tableModel, basePath, selectedRow); // Llamada recursiva
                    if(subIndex >-1)
                        selectedRow = subIndex;
                }
            }
        }
        return selectedRow;
    }
}
