/**
 * ****************************************************************************
 *  Copyright(c) 2025 the original author Eduardo Iglesias Taylor.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  	 https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  Contributors:
 *  	Eduardo Iglesias - initial API and implementation
 * *****************************************************************************
 */
package org.platkmframework.cplatkm.desktop.panels.openapi.request;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.apache.commons.lang3.StringUtils;
import org.platkmframework.cplatkm.desktop.core.components.table.button.BasicButtonAction;
import org.platkmframework.cplatkm.desktop.core.components.table.button.ButtonsEditor;
import org.platkmframework.cplatkm.desktop.core.components.table.button.ButtonsPanel;
import org.platkmframework.cplatkm.desktop.core.components.table.button.ButtonsRenderer;
import org.platkmframework.cplatkm.processor.data.openapi.CGComponents;
import org.platkmframework.cplatkm.processor.data.openapi.CGContent;
import org.platkmframework.cplatkm.processor.data.openapi.CGOpenAPI;
import org.platkmframework.cplatkm.processor.data.openapi.CGSchema;

/**
 *
 * @author Eduardo Iglesias
 */
public class OpenAPIsRequestBodyJson extends javax.swing.JPanel {

    private DefaultTableModel jsonModel;
    private CGContent cgContent;
    private  List<CGSchema>  properties;
    private String componentId;
    
    /**
     * Creates new form OpenAPIsRequestBodyJson
     */
    public OpenAPIsRequestBodyJson() {
        initComponents();
        
        initCustomComponent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tpnlParamSchema = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbJSON = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbTypes = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cmbComponents = new javax.swing.JComboBox<>();

        jSplitPane1.setDividerLocation(601);

        jScrollPane3.setViewportView(tpnlParamSchema);

        jSplitPane1.setRightComponent(jScrollPane3);

        tbJSON.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Type Reference", "Schema", "Description"
            }
        ));
        jScrollPane1.setViewportView(tbJSON);

        jLabel1.setText("Type");

        cmbTypes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "array", "object", "reference" }));

        jLabel2.setText("Components");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbTypes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbComponents, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbComponents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<org.platkmframework.cplatkm.processor.data.openapi.CGComponents> cmbComponents;
    private javax.swing.JComboBox<String> cmbTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tbJSON;
    private javax.swing.JTextPane tpnlParamSchema;
    // End of variables declaration//GEN-END:variables

    
    public void refreshJsonTable(CGContent cgContent, CGOpenAPI cGOpenAPI){
        
        this.cgContent = cgContent;
        this.componentId = this.cgContent.getCGSchema().getSchemaRefComponentId();
        
        this.cmbComponents.removeAllItems();
        for (CGComponents cgComponents : cGOpenAPI.getComponents()) {
            cmbComponents.addItem(cgComponents);
        }
        
        this.jsonModel.setRowCount(0);
        if(StringUtils.isNotBlank( this.componentId)){
            cmbTypes.setSelectedItem("reference");
            cmbComponents.setSelectedItem( cGOpenAPI.getComponents().
                    stream().filter(c->c.getId().equals(this.componentId)).findFirst().orElse(null)); 
        }else{
            cmbTypes.setSelectedItem(cgContent.getCGSchema().getType());
            
            if(!this.cgContent.getCGSchema().getProperties().isEmpty()){
                this.properties = this.cgContent.getCGSchema().getProperties();
            }else if(this.cgContent.getCGSchema().getItems() != null){
                if(this.cgContent.getCGSchema().getItems().getProperties() != null){
                    this.properties = this.cgContent.getCGSchema().getItems().getProperties();
                }else if(StringUtils.isNotBlank(this.cgContent.getCGSchema().getItems().getSchemaRefComponentId())){
                    cmbTypes.setSelectedItem("reference");
                    this.componentId = this.cgContent.getCGSchema().getItems().getSchemaRefComponentId();
                    cmbComponents.setSelectedItem( cGOpenAPI.getComponents().
                        stream().filter(c->c.getId().equals(this.componentId)).findFirst().orElse(null));
                }
            }
            
            for (CGSchema cgSchema : this.properties) {
                this.jsonModel.addRow( new Object[] { cgSchema.getName(),cgSchema.getType(), "", cgSchema.getDescription()} );
            } 
        }     
        
    } 

    private void initCustomComponent() { 
        
        jsonModel = new DefaultTableModel(new String[]{"Name","Type", "Type Reference", "Schema", "Description"}, 0);
        tbJSON.setModel(jsonModel);
        
        List<JButton> buttons = new ArrayList<>();
        JButton buton = new JButton("...");
        buton.setAction(new BasicButtonAction("...") {
           
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = tbJSON.getSelectedRow();
                if (selectedRow >=0) {
                }
            }
        });
        
        buttons.add(buton);
        ButtonsPanel ButtonsPanel = new  ButtonsPanel(buttons);
        tbJSON.getColumnModel().getColumn(4).setCellRenderer(new ButtonsRenderer(ButtonsPanel));
        tbJSON.getColumnModel().getColumn(4).setCellEditor(new ButtonsEditor(this.tbJSON, ButtonsPanel) );
        
        // Obtener el editor de celdas para todas las columnas
        TableCellEditor editor = tbJSON.getDefaultEditor(Object.class);
            
        // Agregar el CellEditorListener
        editor.addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int fila = tbJSON.getSelectedRow();
                int columna = tbJSON.getSelectedColumn();
                if(fila> -1 && columna > -1){
                     System.out.println("Edición detenida en fila " + fila + ", columna " + columna + " con valor: ");
                    Object valor = tbJSON.getValueAt(fila, columna);
                    System.out.println("Edición detenida en fila " + fila + ", columna " + columna + " con valor: " + valor);
                    // Llamar al método deseado
                    operacionPostEdicion(fila, columna, valor);
                } 
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
                // Opcional: manejar la cancelación de la edición
                System.out.println("Edición cancelada.");
            }
        });
        
        cmbComponents.setRenderer((JList<? extends CGComponents> list, CGComponents value, int index, boolean isSelected, boolean cellHasFocus) -> {
            JLabel label = new JLabel();
            if(value != null) label.setText(value.getName());
            return label;
        });
    }
    
    public void operacionPostEdicion(int fila, int columna, Object valor) {
        // Implementa la operación que deseas realizar
       System.out.println( "Edición finalizada:\nFila: " + fila + "\nColumna: " + columna + "\nNuevo Valor: " + valor);
       
     /**  if(columna == 0)
        artProperties.get(fila).setId(valor);
       else if(columna == 1)
        artProperties.get(fila).setText(valor);*/
    }    
}
