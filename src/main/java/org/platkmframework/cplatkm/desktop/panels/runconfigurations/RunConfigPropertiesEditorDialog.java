/**
 * ****************************************************************************
 *  Copyright(c) 2025 the original author Eduardo Iglesias Taylor.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  	 https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  Contributors:
 *  	Eduardo Iglesias Taylor - initial API and implementation
 * *****************************************************************************
 */
package org.platkmframework.cplatkm.desktop.panels.runconfigurations;

 
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.awt.Dialog;
import java.awt.Window;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane; 
import org.platkmframework.cplatkm.desktop.core.CPlatkmContentManager;

/**
 *
 * @author eigta
 */
public class RunConfigPropertiesEditorDialog extends javax.swing.JDialog {

    public boolean updated = false;
    public  Map<String, String> mapData;

    /**
     * 
     * @param owner
     * @param title
     * @param modalityType 
     */
    public RunConfigPropertiesEditorDialog(Window owner, String title, ModalityType modalityType) {
        super(owner, title, modalityType);
        initComponents();
        setLocationRelativeTo(CPlatkmContentManager.getInstance().getMainFrame());
        setModalityType(Dialog.ModalityType.DOCUMENT_MODAL);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        epnlTemplate = new javax.swing.JTextPane();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Config Properties");

        jScrollPane1.setViewportView(epnlTemplate);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 420, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        this.updated = false;
        try { 
            ObjectMapper objectMapper = new ObjectMapper();
            this.mapData = objectMapper.readValue(epnlTemplate.getText(), Map.class);
            this.updated = true;
            setVisible(false);
        } catch (JsonProcessingException ex) {
            Logger.getLogger(RunConfigPropertiesEditorDialog.class.getName()).log(Level.SEVERE, null, ex);
            
           
            JOptionPane.showMessageDialog(this,
                 "Json error",
                "Edit", JOptionPane.ERROR_MESSAGE);
            
           
        } 

    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JTextPane epnlTemplate;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void setData(Object mapData) {
        this.updated = false;
        try {
            
            ObjectWriter writer = new ObjectMapper().writerWithDefaultPrettyPrinter();
            String formattedJson = writer.writeValueAsString( mapData==null? new HashMap<String, String>(): mapData);
            epnlTemplate.setText(formattedJson); 
        } catch (JsonProcessingException ex) {
            Logger.getLogger(RunConfigPropertiesEditorDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
                

    }
}
