/**
 * ****************************************************************************
 *  Copyright(c) 2025 the original author Eduardo Iglesias.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  	 https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  Contributors:
 *  	Eduardo Iglesias - initial API and implementation
 * *****************************************************************************
 */
package org.platkmframework.cplatkm.desktop.panels.openapi.paths;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.platkmframework.cplatkm.desktop.commons.HttpStatus;
import org.platkmframework.cplatkm.desktop.commons.editor.ComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.EditComponentsInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTextPaneComponentInspector;
import org.platkmframework.cplatkm.desktop.core.CGeneratorContentManager;
import org.platkmframework.cplatkm.processor.data.openapi.CGPaths;
import org.platkmframework.cplatkm.processor.exception.CGeneratorException;

/**
 *
 * @author Eduardo Iglesias
 */
public class OpenApiPathsEditorPanel extends javax.swing.JPanel {

    private CGPaths cgPaths;
     
    private final PathsContentEditorPanel pathsContentEditorPanelParam;
    private final PathsContentEditorPanel pathsContentEditorPanelRequestBody;
    private final PathsContentEditorPanel pathsContentEditorPanelResponseBody;
    
      private EditComponentsInspector editComponentsInspector;
      
    /**
     * Creates new form OpenApiPathsEditorPanel
     */
    public OpenApiPathsEditorPanel() {
        initComponents();
        pathsContentEditorPanelParam = new PathsContentEditorPanel();
        scrollPnlParam.setViewportView(pathsContentEditorPanelParam);
        
        pathsContentEditorPanelRequestBody = new PathsContentEditorPanel();
        scrollPnlRequestBody.setViewportView(pathsContentEditorPanelRequestBody);
                
        pathsContentEditorPanelResponseBody = new PathsContentEditorPanel();
        scrollPnlResponseBody.setViewportView(pathsContentEditorPanelResponseBody);
        
        initEditorComponetInspector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupRequestBody = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbMethod = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtSummary = new javax.swing.JTextField();
        txtPath = new javax.swing.JTextField();
        btnApply = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        scrollPnlParam = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        scrollPnlRequestBody = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        scrollPnlResponseBody = new javax.swing.JScrollPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaDescription = new javax.swing.JTextArea();

        jLabel1.setText("Method");

        cmbMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GET", "POST", "PUT", "DELETE" }));

        jLabel2.setText("Summary");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSummary))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPath)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        btnApply.setText("Appy");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlParam, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlParam, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Parameters", jPanel3);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlRequestBody, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlRequestBody, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Request Body", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlResponseBody, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPnlResponseBody, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Responses", jPanel5);

        txtAreaDescription.setColumns(20);
        txtAreaDescription.setRows(5);
        jScrollPane1.setViewportView(txtAreaDescription);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Description", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApply))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        try {
            CGeneratorContentManager.getInstance().updateConfigFile();
        } catch (CGeneratorException ex) {
            Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnApplyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.ButtonGroup btnGroupRequestBody;
    private javax.swing.JComboBox<String> cmbMethod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JScrollPane scrollPnlParam;
    private javax.swing.JScrollPane scrollPnlRequestBody;
    private javax.swing.JScrollPane scrollPnlResponseBody;
    private javax.swing.JTextArea txtAreaDescription;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtSummary;
    // End of variables declaration//GEN-END:variables

    public void refreshData(String openApiParentId, CGPaths pcgPaths) {
        
        
         
        CGeneratorContentManager.getInstance().getCgenetatorConfig().getOpenAPIs().stream().filter(o-> o.getId().equals(openApiParentId)).findFirst().orElse(null);
        this.cgPaths = pcgPaths;
        txtSummary.setText(cgPaths.getSummary());
        cmbMethod.setSelectedItem(HttpStatus.valueOf(cgPaths.getMethod().toUpperCase()).name());
        txtPath.setText(cgPaths.getPath());
        txtAreaDescription.setText(pcgPaths.getDescription());
        
        tabParameters();
        tabRequestBody();
        tabResponseBody();
         
        editComponentsInspector.reset(); 
    } 

    private void tabParameters() {
       /** TypeToken<List<CGParameters>> type = new TypeToken<>() {};
        Consumer<String> saveParameters = json ->{ 
            try {
                this.cgPaths.setParameters(JsonUtil.jsonToObjectTypeReference(json, type));
            } catch (JsonException ex) {
                Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Json", JOptionPane.ERROR_MESSAGE);
            }
        };
          */
        try {
            ObjectWriter writer = new ObjectMapper().writerWithDefaultPrettyPrinter();
            String  json = writer.writeValueAsString(cgPaths.getParameters());
            pathsContentEditorPanelParam.setData(json);
        } catch (JsonProcessingException ex) {
            Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void tabRequestBody() {
        
   /**     TypeToken<CGRequestBody> type = new TypeToken<>() {};
        Consumer<String> saveRequestBody = json ->{ 
            try {
                this.cgPaths.setCgRequestBody(JsonUtil.jsonToObjectTypeReference(json, type));
            } catch (JsonException ex) {
                Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Json", JOptionPane.ERROR_MESSAGE);
            }
        };
         */ 
        try {
            ObjectWriter writer = new ObjectMapper().writerWithDefaultPrettyPrinter();
            String  json = writer.writeValueAsString(cgPaths.getCgRequestBody());
            pathsContentEditorPanelRequestBody.setData(json);
        } catch (JsonProcessingException ex) {
            Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void tabResponseBody() {
      /**  TypeToken<List<CGParameters>> type = new TypeToken<>() {};
        Consumer<String> saveParameters = json ->{ 
            try {
                this.cgPaths.setParameters(JsonUtil.jsonToObjectTypeReference(json, type));
            } catch (JsonException ex) {
                Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Json", JOptionPane.ERROR_MESSAGE);
            }
        };
      */    
        try {
            ObjectWriter writer = new ObjectMapper().writerWithDefaultPrettyPrinter();
            String  json = writer.writeValueAsString(cgPaths.getResponses());
            pathsContentEditorPanelResponseBody.setData(json);
        } catch (JsonProcessingException ex) {
            Logger.getLogger(OpenApiPathsEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initEditorComponetInspector() {
        List<ComponentInspector> components = new ArrayList<>();
        components.add(new JTextPaneComponentInspector(pathsContentEditorPanelParam.getTextPane(), null));  
        components.add(new JTextPaneComponentInspector(pathsContentEditorPanelRequestBody.getTextPane(), null));
        components.add(new JTextPaneComponentInspector(pathsContentEditorPanelResponseBody.getTextPane(), null));
        editComponentsInspector = new EditComponentsInspector(components, btnApply);
    } 
}
