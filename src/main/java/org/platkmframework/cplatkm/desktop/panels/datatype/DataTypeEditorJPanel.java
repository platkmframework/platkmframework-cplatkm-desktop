/*
 * Copyright 2025 Eduardo Iglesias.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.platkmframework.cplatkm.desktop.panels.datatype;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.apache.commons.lang3.StringUtils;
import org.platkmframework.cplatkm.desktop.commons.editor.ComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.EditComponentsInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTableEditorComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTextAreaEditorComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTextEditorComponentInspector;
import org.platkmframework.cplatkm.desktop.core.CGeneratorContentManager;
import org.platkmframework.cplatkm.processor.data.DataTypeMapping;
import org.platkmframework.cplatkm.processor.exception.CGeneratorException;
import org.platkmframework.util.Util;
import org.platkmframework.util.app.util.ui.OptionValue;

/**
 *
 * @author Eduardo Iglesias
 */
public class DataTypeEditorJPanel extends javax.swing.JPanel {

    public DataTypeMapping item; 
    DefaultTableModel tableModel;
    private List<OptionValue> artProperties;
    private EditComponentsInspector editComponentsInspector;
    
    /**
     * Creates new form DataTypeEditorJPanel
     */
    public DataTypeEditorJPanel() {
        initComponents();
        initCustomComponent();
        initEditorComponetInspector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMapa = new javax.swing.JTable();
        btnRemoveProp = new javax.swing.JButton();
        btnAddProp = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnApply = new javax.swing.JButton();

        jLabel1.setText("Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tbMapa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "key", "value"
            }
        ));
        jScrollPane1.setViewportView(tbMapa);

        btnRemoveProp.setText("Remove");
        btnRemoveProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemovePropActionPerformed(evt);
            }
        });

        btnAddProp.setText("Add");
        btnAddProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddProp, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveProp, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveProp)
                    .addComponent(btnAddProp))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        jTabbedPane1.addTab("Mapping", jPanel3);

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane2.setViewportView(txtDescription);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Description", jPanel4);

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jTabbedPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnApply)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemovePropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemovePropActionPerformed
        int selectedRow = tbMapa.getSelectedRow();
        if (selectedRow >= 0) {
            artProperties.remove(selectedRow);
            refreshProperties();
        }
    }//GEN-LAST:event_btnRemovePropActionPerformed

    private void btnAddPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPropActionPerformed
        this.artProperties.add(new OptionValue("",""));
        refreshProperties();
    }//GEN-LAST:event_btnAddPropActionPerformed

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed

        if(StringUtils.isBlank(txtName.getText())){
            JOptionPane.showMessageDialog(this,
                "DataType name should not be empty",
                "Edit", JOptionPane.WARNING_MESSAGE);

            return;
        }

        this.item.setName(txtName.getText().trim());
        this.item.setDescription(txtDescription.getText());
        this.item.getMapping().clear();
        for (OptionValue artProperty : artProperties) {
            if(artProperty.getId()!=null && StringUtils.isNotBlank(artProperty.getId().toString()) && !this.item.getMapping().containsKey(artProperty.getId().toString().trim()) )
            this.item.getMapping().put(artProperty.getId().toString().trim(), artProperty.getText() != null?artProperty.getText().toString():"");
        }
        
        if(StringUtils.isBlank(this.item.getId())){
        
            this.item.setId(Util.randomAlfaNumericString(255)); 
            try {
            
                CGeneratorContentManager.getInstance().getCgenetatorConfig().getDatatypes().add(this.item);
                CGeneratorContentManager.getInstance().refreshDataTypeSeparator();
                CGeneratorContentManager.getInstance().updateConfigFile();
                
                editComponentsInspector.reset();  
                
            } catch (CGeneratorException ex) {
                Logger.getLogger(DataTypePanel.class.getName()).log(Level.ALL.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Create", JOptionPane.WARNING_MESSAGE);
            }
        }else{
            try {
               for (int i = 0; i < CGeneratorContentManager.getInstance().getCgenetatorConfig().getDatatypes().size(); i++) {
                    if (CGeneratorContentManager.getInstance().getCgenetatorConfig().getDatatypes().get(i).getId().equals(this.item.getId())) {
                        CGeneratorContentManager.getInstance().getCgenetatorConfig().getDatatypes().set(i, this.item);
                        break;
                    }
                }
                CGeneratorContentManager.getInstance().refreshDataTypeSeparator();
                CGeneratorContentManager.getInstance().updateConfigFile();
                
                editComponentsInspector.reset();  
                
            } catch (CGeneratorException ex) {
                Logger.getLogger(DataTypePanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Edit", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_btnApplyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProp;
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnRemoveProp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbMapa;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables


   public void setData(DataTypeMapping item) {
        
        tableModel.setRowCount(0); 
        artProperties = new ArrayList<>();
        this.item = item;
        if(this.item == null) this.item = new DataTypeMapping();
        
        txtName.setText(this.item.getName());   
        txtDescription.setText(this.item.getDescription()); 
        
        for (Map.Entry<String, String> en : this.item.getMapping().entrySet()) { 
            artProperties.add(new OptionValue(en.getKey(), en.getValue()));
        } 
        refreshProperties(); 
        
        editComponentsInspector.reset();
        
    }
    
    void refreshProperties(){
        this.tableModel.setRowCount(0);
        for (OptionValue artProperty : artProperties) {
            tableModel.addRow( new Object[] { artProperty.getId(), artProperty.getText()} );
        }    
    }

    private void initCustomComponent() { 
        
        tableModel = new DefaultTableModel(new String[]{"Key","Value"}, 0);
        tbMapa.setModel(tableModel);
        
        // Obtener el editor de celdas para todas las columnas
        TableCellEditor editor = tbMapa.getDefaultEditor(Object.class);
            
        // Agregar el CellEditorListener
        editor.addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int fila = tbMapa.getSelectedRow();
                int columna = tbMapa.getSelectedColumn();
                if(fila> -1 && columna > -1){
                     System.out.println("Edición detenida en fila " + fila + ", columna " + columna + " con valor: ");
                    Object valor = tbMapa.getValueAt(fila, columna);
                    System.out.println("Edición detenida en fila " + fila + ", columna " + columna + " con valor: " + valor);
                    // Llamar al método deseado
                    operacionPostEdicion(fila, columna, valor);
                } 
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
                // Opcional: manejar la cancelación de la edición
                System.out.println("Edición cancelada.");
            }
        });
    }
    
    public void operacionPostEdicion(int fila, int columna, Object valor) {
        // Implementa la operación que deseas realizar
       System.out.println( "Edición finalizada:\nFila: " + fila + "\nColumna: " + columna + "\nNuevo Valor: " + valor);
       
       if(columna == 0)
        artProperties.get(fila).setId(valor);
       else if(columna == 1)
        artProperties.get(fila).setText(valor);
    }

    public DataTypeMapping getItem() {
        return item;
    }

    public void setItem(DataTypeMapping item) {
        this.item = item;
    }
    
    private void initEditorComponetInspector() {
        List<ComponentInspector> components = new ArrayList<>();
        
        components.add(new JTextEditorComponentInspector(txtName, null)); 
        components.add(new JTextAreaEditorComponentInspector(txtDescription, null));  
        components.add(new JTableEditorComponentInspector(tbMapa, null));  
        
        editComponentsInspector = new EditComponentsInspector(components, btnApply);
    }  
}
