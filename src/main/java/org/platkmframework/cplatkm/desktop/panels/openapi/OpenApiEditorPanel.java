/*
 * Copyright 2025 Eduardo Iglesias.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.platkmframework.cplatkm.desktop.panels.openapi;

import org.platkmframework.cplatkm.desktop.panels.globaldata.GlobalDataPanel;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.undo.UndoManager;
import org.apache.commons.lang3.StringUtils;
import org.platkmframework.cplatkm.desktop.commons.editor.ComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.EditComponentsInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTextPaneComponentInspector;
import org.platkmframework.cplatkm.desktop.core.CGeneratorContentManager;
import org.platkmframework.cplatkm.processor.data.OpenApiImported;
import org.platkmframework.cplatkm.processor.exception.CGeneratorException;
import org.platkmframework.util.Util;

/**
 *
 * @author Eduardo Iglesias
 */
public class OpenApiEditorPanel extends javax.swing.JPanel {

    public  OpenApiImported openApiImported;
    private EditComponentsInspector editComponentsInspector;
      
    /**
     * Creates new form GlobalDataEditorPanel
     */
    public OpenApiEditorPanel() {
        initComponents();
        initJTextPane();
        initEditorComponetInspector();
        
        increaseFontSizeButton.addActionListener(e -> {
            Font currentFont = textPane.getFont();
            textPane.setFont(new Font(currentFont.getName(), currentFont.getStyle(), currentFont.getSize() + 2));
        });

        decreaseFontSizeButton.addActionListener(e -> {
            Font currentFont = textPane.getFont();
            textPane.setFont(new Font(currentFont.getName(), currentFont.getStyle(), Math.max(currentFont.getSize() - 2, 8)));
        });
        
        colorButton.addActionListener(e -> {
            Color selectedColor = JColorChooser.showDialog(CGeneratorContentManager.getInstance().getMainFrame(), "Elige un color", Color.BLACK);
            if (selectedColor != null) {
                textPane.setForeground(selectedColor);
            }
        });
        
        String[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        fontComboBox.removeAllItems();
        if(fonts != null && fonts.length>0)
            for (String font : fonts) {
                fontComboBox.addItem(font);
            }
            
        fontComboBox.addActionListener(e -> {
            String selectedFont = (String) fontComboBox.getSelectedItem();
            Font currentFont = textPane.getFont();
            textPane.setFont(new Font(selectedFont, currentFont.getStyle(), currentFont.getSize()));
        });
        
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        jToolBar1 = new javax.swing.JToolBar();
        btnUndo = new javax.swing.JButton();
        btnRedo = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        decreaseFontSizeButton = new javax.swing.JButton();
        increaseFontSizeButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        colorButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        fontComboBox = new javax.swing.JComboBox<>();
        btnApply = new javax.swing.JButton();

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane1.setViewportView(textPane);

        jToolBar1.setRollover(true);

        btnUndo.setText("Undo");
        btnUndo.setFocusable(false);
        btnUndo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnUndo);

        btnRedo.setText("Redo");
        btnRedo.setFocusable(false);
        btnRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnRedo);
        jToolBar1.add(jSeparator2);

        decreaseFontSizeButton.setText("A-");
        decreaseFontSizeButton.setFocusable(false);
        decreaseFontSizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        decreaseFontSizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(decreaseFontSizeButton);

        increaseFontSizeButton.setText("A+");
        increaseFontSizeButton.setFocusable(false);
        increaseFontSizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        increaseFontSizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(increaseFontSizeButton);
        jToolBar1.add(jSeparator3);

        colorButton.setText("Color");
        colorButton.setFocusable(false);
        colorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(colorButton);
        jToolBar1.add(jSeparator1);

        jToolBar1.add(fontComboBox);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(348, Short.MAX_VALUE)
                .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        try {

            ObjectMapper objectMapper = new ObjectMapper();
            this.openApiImported.setData(objectMapper.readValue(textPane.getText(), Map.class));
            
            if(StringUtils.isBlank(this.openApiImported.getId())){
                
                try {
                    this.openApiImported.setId(Util.randomAlfaNumericString(255)); 
                    CGeneratorContentManager.getInstance().getCgenetatorConfig().getOpenAPIs().add(this.openApiImported);
                    CGeneratorContentManager.getInstance().refreshOpenAPISeparator();  
                    CGeneratorContentManager.getInstance().updateConfigFile();
                    editComponentsInspector.reset(); 

                } catch (CGeneratorException ex) {
                    Logger.getLogger(GlobalDataPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Create", JOptionPane.WARNING_MESSAGE);
                }
            
            }else{
                try {
                        for (int i = 0; i < CGeneratorContentManager.getInstance().getCgenetatorConfig().getOpenAPIs().size(); i++) {
                            if (CGeneratorContentManager.getInstance().getCgenetatorConfig().getOpenAPIs().get(i).getId().equals(this.openApiImported.getId())) {
                                CGeneratorContentManager.getInstance().getCgenetatorConfig().getOpenAPIs().set(i, this.openApiImported);
                                break;
                            }
                        }
                        CGeneratorContentManager.getInstance().refreshGlobalDataSeparator();
                        CGeneratorContentManager.getInstance().updateConfigFile();
                        
                        editComponentsInspector.reset(); 
                        
                } catch (CGeneratorException ex) {
                    Logger.getLogger(GlobalDataPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Edit", JOptionPane.ERROR_MESSAGE);
                }            
            }

        } catch (JsonProcessingException ex) {
            Logger.getLogger(OpenApiEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this,
                "Json error",
                "Edit", JOptionPane.ERROR_MESSAGE);
        } 
        
        
    }//GEN-LAST:event_btnApplyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnRedo;
    private javax.swing.JButton btnUndo;
    private javax.swing.JButton colorButton;
    private javax.swing.JButton decreaseFontSizeButton;
    private javax.swing.JComboBox<String> fontComboBox;
    private javax.swing.JButton increaseFontSizeButton;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables


    public void setData(OpenApiImported pOpenApiImported) {
        
        this.openApiImported = pOpenApiImported;
        if(this.openApiImported == null){
            this.openApiImported = new OpenApiImported();
            this.openApiImported.setData(CGeneratorContentManager.getInstance().getDefaultOpenApi());
        }
        
        try {
            ObjectWriter writer = new ObjectMapper().writerWithDefaultPrettyPrinter();
            textPane.setText(writer.writeValueAsString(this.openApiImported.getData()));
        } catch (JsonProcessingException ex) {
            Logger.getLogger(OpenApiEditorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        editComponentsInspector.reset(); 

    }

    public OpenApiImported getOpenApiImported() {
        return openApiImported;
    }
    
     private void initEditorComponetInspector() {
        List<ComponentInspector> components = new ArrayList<>();
        components.add(new JTextPaneComponentInspector(textPane, null));  
        editComponentsInspector = new EditComponentsInspector(components, btnApply);
    }  

    private void initJTextPane() {
        
        
        UndoManager undoManager = new UndoManager();
        StyledDocument styledDoc = textPane.getStyledDocument();
         styledDoc.addUndoableEditListener(undoManager);
        SimpleAttributeSet keywordStyle = new SimpleAttributeSet();
        StyleConstants.setForeground(keywordStyle, Color.BLUE);
        
         Pattern keywordPattern = Pattern.compile("\"([^\"]+)\"(?=\s*:\s*)"); 
            
        textPane.getDocument().addDocumentListener(new DocumentListener() {
                private void applyHighlighting(DocumentEvent e) {
                    SwingUtilities.invokeLater(() -> {
                        try {
                            int start = e.getOffset();
                            int length = e.getLength();
                            String text = styledDoc.getText(0, styledDoc.getLength());
                            
                            // Obtener el rango afectado
                            int startWord = Math.max(0, text.lastIndexOf(" ", start));
                            int endWord = Math.min(text.length(), text.indexOf(" ", start + length));
                            if (endWord == -1) endWord = text.length();

                            Matcher matcher = keywordPattern.matcher(text.substring(startWord, endWord + 200));

                            // Restablecer estilos en el rango afectado
                            styledDoc.setCharacterAttributes(startWord, endWord - startWord, new SimpleAttributeSet(), true);

                            while (matcher.find()) {
                                int keywordStart = startWord + matcher.start();
                                int keywordEnd = startWord + matcher.end();
                                styledDoc.setCharacterAttributes(keywordStart, keywordEnd - keywordStart, keywordStyle, true);
                            }
                        } catch (BadLocationException ex) {
                            ex.printStackTrace();
                        }
                    });
                }

                @Override
                public void insertUpdate(DocumentEvent e) {
                    applyHighlighting(e);
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    applyHighlighting(e);
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                }
            });     
        
        
        btnUndo.addActionListener(e -> {
               if (undoManager.canUndo()) {
                   undoManager.undo();
               }
           });

        btnRedo.addActionListener(e -> {
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
        });  
        
        textPane.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if ((e.getKeyCode() == KeyEvent.VK_Z) && e.isControlDown()) {
                    if (undoManager.canUndo()) {
                        undoManager.undo();
                    }
                } else if ((e.getKeyCode() == KeyEvent.VK_Y) && e.isControlDown()) {
                    if (undoManager.canRedo()) {
                        undoManager.redo();
                    }
                }
            }
        });
    }
    
    private static void updateHighlight(StyledDocument doc) {
        SwingUtilities.invokeLater(() -> {
            try {
                String text = doc.getText(0, doc.getLength());
                doc.setCharacterAttributes(0, text.length(), doc.getStyle("Default"), true);

                // Resaltar atributos ("clave":)
                 Pattern pattern = Pattern.compile("\"([^\"]+)\"(?=\s*:\s*)");
                Matcher matcher = pattern.matcher(text);
                while (matcher.find()) {
                    doc.setCharacterAttributes(matcher.start(), matcher.end() - matcher.start(), doc.getStyle("Attribute"), false);
                }

                // Resaltar valores (números, booleanos, null)
                Pattern valuePattern = Pattern.compile("(?<=:\\s*)(-?\\d+(?:\\.\\d+)?|true|false|null)");
                Matcher valueMatcher = valuePattern.matcher(text);
                while (valueMatcher.find()) {
                    doc.setCharacterAttributes(valueMatcher.start(), valueMatcher.end() - valueMatcher.start(), doc.getStyle("Value"), false);
                }

                // Resaltar valores de cadena, permitiendo saltos de línea
                Pattern stringPattern = Pattern.compile("\"((?:\\\\.|[^\"]|\\R)*)\"");

                Matcher stringMatcher = stringPattern.matcher(text);
                while (stringMatcher.find()) {
                    doc.setCharacterAttributes(stringMatcher.start(), stringMatcher.end() - stringMatcher.start(), doc.getStyle("Value"), false);
                }
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        });
    }
}
