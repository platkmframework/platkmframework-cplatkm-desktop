/*
 * Copyright 2025 Eduardo Iglesias.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.platkmframework.cplatkm.desktop.panels.artifacts;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import org.apache.commons.lang3.StringUtils;
import org.platkmframework.cplatkm.desktop.commons.editor.ComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.EditComponentsInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JCheckBoxComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTableEditorComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTextAreaEditorComponentInspector;
import org.platkmframework.cplatkm.desktop.commons.editor.JTextEditorComponentInspector;
import org.platkmframework.cplatkm.desktop.core.CPlatkmContentManager;
import org.platkmframework.cplatkm.processor.data.Artifact;
import org.platkmframework.cplatkm.processor.data.Template;
import org.platkmframework.cplatkm.processor.exception.CPlatkmException;
import org.platkmframework.util.Util;
import org.platkmframework.util.app.util.ui.OptionValue;

/**
 *
 * @author Eduardo Iglesias
 */
public class TemplateEditorJPanel extends javax.swing.JPanel {

    private Artifact artifact;
    private Template item;
    private int selectedRow;
    private List<OptionValue> artProperties;
    DefaultTableModel tableModel;
    private EditComponentsInspector editComponentsInspector;
    
    /**
     * Creates new form TemplateEditorJPanel
     */
    public TemplateEditorJPanel() {
        initComponents();
        initCustomComponent();
        initEditorComponetInspector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        chRewritable = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        txtPrefix = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSuffix = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtFileExtension = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDefaultOutputFileName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtTemplatePath = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMapa = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnApply = new javax.swing.JButton();

        jLabel1.setText("Name");

        chRewritable.setText("Rewritable");

        jLabel2.setText("Prefix");

        jLabel3.setText("Suffix");

        jLabel4.setText("File extension");

        jLabel7.setText("Default Output File Name");

        jLabel8.setText("Code:");

        jLabel5.setText("Template file name");

        txtTemplatePath.setEditable(false);
        txtTemplatePath.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrefix)
                            .addComponent(txtName)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFileExtension))
                    .addComponent(chRewritable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSuffix))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCode))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTemplatePath)
                            .addComponent(txtDefaultOutputFileName))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtSuffix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtDefaultOutputFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtFileExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chRewritable))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(txtTemplatePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );

        tbMapa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "key", "value"
            }
        ));
        jScrollPane1.setViewportView(tbMapa);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Properties", jPanel3);

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane2.setViewportView(txtDescription);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Description", jPanel4);

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addGap(11, 11, 11))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed

        if(StringUtils.isBlank(txtName.getText())){
            JOptionPane.showMessageDialog(this,
                "Artifact name should not be empty",
                "Edit", JOptionPane.WARNING_MESSAGE);

            return;
        }

        this.item.setLabel(txtName.getText().trim());
        this.item.setCode(txtCode.getText());
        this.item.setRewritable(chRewritable.isSelected());
        this.item.setPrefix(txtPrefix.getText());
        this.item.setSuffix(txtSuffix.getText());
        this.item.setFileExtension(txtFileExtension.getText());
        this.item.setDescription(txtDescription.getText());
        this.item.setOutputFileName(txtDefaultOutputFileName.getText());

        this.item.getProperties().clear();
        for (OptionValue artProperty : artProperties) {
            if(artProperty.getId()!=null && StringUtils.isNotBlank(artProperty.getId().toString()) && !this.item.getProperties().containsKey(artProperty.getId().toString().trim()) )
            this.item.getProperties().put(artProperty.getId().toString().trim(), artProperty.getText() != null?artProperty.getText().toString():"");
        }
        
        if(StringUtils.isBlank(this.item.getId())){
        
            this.item.setId(Util.randomAlfaNumericString(255));
            this.item.setTemplatename(this.item.getLabel().strip() + "_" + Util.randomAlfaNumericString(10));
            try {

                CPlatkmContentManager.getInstance().createTemplateFile(artifact.getFoldername(), this.item.getTemplatename());
                artifact.getTemplates().add(this.item);
                CPlatkmContentManager.getInstance().templateAddNewNode(this.item, artifact);

                CPlatkmContentManager.getInstance().updateConfigFile();
                
                editComponentsInspector.reset();  
                
            } catch (CPlatkmException ex) {
                Logger.getLogger(TemplatesPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,
                ex.getMessage(),
                "Create", JOptionPane.WARNING_MESSAGE);
            }    
        }else{
                try {
                    
                    artifact.getTemplates().set(selectedRow, this.item);
                    CPlatkmContentManager.getInstance().templateUpdateNewNode(this.item);
                    CPlatkmContentManager.getInstance().updateConfigFile();
                    
                    editComponentsInspector.reset();  
                    
                } catch (CPlatkmException ex) {
                    Logger.getLogger(TemplatesPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Edit", JOptionPane.WARNING_MESSAGE);
                }        
        }
        
        
 
    }//GEN-LAST:event_btnApplyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JCheckBox chRewritable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbMapa;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtDefaultOutputFileName;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtFileExtension;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrefix;
    private javax.swing.JTextField txtSuffix;
    private javax.swing.JTextField txtTemplatePath;
    // End of variables declaration//GEN-END:variables


    public void setData(Artifact artifact, Template item, int selectedRow) {
        
        tableModel.setRowCount(0); 
        artProperties = new ArrayList<>();
        this.artifact = artifact;
        this.item = item;
        this.selectedRow = selectedRow;
        if(item == null) this.item = new Template();
        
        txtName.setText(this.item.getLabel());
        txtCode.setText(this.item.getCode());
        chRewritable.setSelected( this.item.isRewritable());
        txtPrefix.setText(this.item.getPrefix());
        txtSuffix.setText(this.item.getSuffix());
        txtFileExtension.setText(this.item.getFileExtension());
        txtTemplatePath.setText(this.item.getTemplatename());
        txtDescription.setText(this.item.getDescription()); 
        txtDefaultOutputFileName.setText( this.item.getOutputFileName()); 
         
        for (Map.Entry<String, String> en : this.item.getProperties().entrySet()) { 
             artProperties.add(new OptionValue(en.getKey(), en.getValue()));
        } 
        refreshProperties();    
        
        editComponentsInspector.reset();
        
    }
    
    void refreshProperties(){
        this.tableModel.setRowCount(0);
        for (OptionValue artProperty : artProperties) {
            tableModel.addRow( new Object[] { artProperty.getId(), artProperty.getText()} );
        }    
    }

    private void initCustomComponent() { 
        artProperties = new ArrayList<>();
        tableModel = new DefaultTableModel(new String[]{"Key","Value"}, 0);
        tbMapa.setModel(tableModel);
        
        // Obtener el editor de celdas para todas las columnas
        TableCellEditor editor = tbMapa.getDefaultEditor(Object.class);
            
        // Agregar el CellEditorListener
        editor.addCellEditorListener(new CellEditorListener() {
            @Override
            public void editingStopped(ChangeEvent e) {
                int fila = tbMapa.getSelectedRow();
                int columna = tbMapa.getSelectedColumn();
                if(fila> -1 && columna > -1){
                     System.out.println("Edición detenida en fila " + fila + ", columna " + columna + " con valor: ");
                    Object valor = tbMapa.getValueAt(fila, columna);
                    System.out.println("Edición detenida en fila " + fila + ", columna " + columna + " con valor: " + valor);
                    // Llamar al método deseado
                    operacionPostEdicion(fila, columna, valor);
                } 
            }

            @Override
            public void editingCanceled(ChangeEvent e) {
                // Opcional: manejar la cancelación de la edición
                System.out.println("Edición cancelada.");
            }
        });
    }
    
    public void operacionPostEdicion(int fila, int columna, Object valor) {
        // Implementa la operación que deseas realizar
       System.out.println( "Edición finalizada:\nFila: " + fila + "\nColumna: " + columna + "\nNuevo Valor: " + valor);
       
       if(columna == 0)
        artProperties.get(fila).setId(valor);
       else if(columna == 1)
        artProperties.get(fila).setText(valor);
    }

    public Template getItem() {
        return item;
    }

    public void setItem(Template item) {
        this.item = item;
    }
    
    private void initEditorComponetInspector() {
        List<ComponentInspector> components = new ArrayList<>();
        
        components.add(new JTextEditorComponentInspector(txtName, null)); 
        components.add(new JTextEditorComponentInspector(txtCode, null)); 
        components.add(new JTextEditorComponentInspector(txtPrefix, null)); 
        components.add(new JTextEditorComponentInspector(txtSuffix, null)); 
        components.add(new JTextEditorComponentInspector(txtFileExtension, null)); 
        components.add(new JTextEditorComponentInspector(txtDefaultOutputFileName, null)); 
        components.add(new JCheckBoxComponentInspector(chRewritable, null)); 
        components.add(new JTextAreaEditorComponentInspector(txtDescription, null));  
        components.add(new JTableEditorComponentInspector(tbMapa, null));  
        
        editComponentsInspector = new EditComponentsInspector(components, btnApply);
    }    

}
