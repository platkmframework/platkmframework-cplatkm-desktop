/**
 * ****************************************************************************
 *  Copyright(c) 2025 the original author Eduardo Iglesias.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  	 https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  Contributors:
 *  	Eduardo Iglesias Taylor - initial API and implementation
 * *****************************************************************************
 */
package org.platkmframework.cplatkm.desktop.importexport;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Level;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.platkmframework.cplatkm.desktop.core.CPlatkmContentManager;
import org.platkmframework.cplatkm.desktop.core.MainTreeCreator;
import org.platkmframework.cplatkm.desktop.commons.TreeNodeTypes;
import org.platkmframework.cplatkm.desktop.tree.CGTreeNode;
import org.platkmframework.cplatkm.processor.data.Artifact;
import org.platkmframework.cplatkm.processor.data.CGenetatorConfig;
import org.platkmframework.cplatkm.processor.data.DataTypeMapping;
import org.platkmframework.cplatkm.processor.data.DatabaseData;
import org.platkmframework.cplatkm.processor.data.GlobalData;
import org.platkmframework.cplatkm.processor.data.RunConfiguration;
import org.platkmframework.cplatkm.processor.data.Template;
import org.platkmframework.cplatkm.processor.exception.CPlatkmException;
import org.platkmframework.util.JsonException;
import org.platkmframework.util.JsonUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Eduardo Iglesias 
 */
public class ExportJDialog extends javax.swing.JDialog {
     
    
    private static Logger logger = LoggerFactory.getLogger(ExportJDialog.class);
    
    private String selectedFileFolder;
    
    JFileChooser fileChooserWorkSpace;
    ExportImportEnum exportImportEnum;
    CGenetatorConfig cgenetatorConfigExport;
    CGenetatorConfig cgenetatorConfigCurrent;
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd_HHmmss_SSS");
    private boolean canceledProcess = false;
    public boolean processDone = false;
    
    /**
     * Creates new form ExportJDialog
     */
    public ExportJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        fileChooserWorkSpace = new JFileChooser();
        //fileChooserWorkSpace.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        treeExportImport = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        btnExport = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tareaResult = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import");

        jScrollPane1.setViewportView(treeExportImport);

        jToolBar1.setRollover(true);

        btnExport.setText("Export selection...");
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExport);

        tareaResult.setEditable(false);
        tareaResult.setColumns(20);
        tareaResult.setRows(5);
        tareaResult.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));
        jScrollPane2.setViewportView(tareaResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        
        if(this.exportImportEnum.name().equals(ExportImportEnum.EXPORT.name())){
            CGTreeNode cgTreeNode = (CGTreeNode) treeExportImport.getModel().getRoot();
            processExport(cgTreeNode);
            if(this.canceledProcess) return;
            
            File exportFile;
            String exportFileName = "cgenetator_export_" + simpleDateFormat.format(new Date());
            if(StringUtils.isNotBlank(CPlatkmContentManager.getInstance().getcGeneratorSettings().getLastExportPath())){
                exportFile = new File(CPlatkmContentManager.getInstance().getcGeneratorSettings().getLastImportPath() + File.separator + exportFileName);
            }else{
                exportFile = new File(exportFileName);
            }  
            
            fileChooserWorkSpace.setSelectedFile(exportFile);
            fileChooserWorkSpace.setDialogTitle("Export directory for file: " + exportFileName);
            int result = fileChooserWorkSpace.showSaveDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooserWorkSpace.getSelectedFile();

                if(!file.exists()){
                    exportProcess(file);
                }else if(!file.isFile()){
                    JOptionPane.showMessageDialog(this,
                                    "You should select a file",
                                    "Export", JOptionPane.WARNING_MESSAGE);
                }else{
                    int response = JOptionPane.showConfirmDialog(null, 
                    "The file already exists, do you want to overrride it?", "Export", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if (response == JOptionPane.YES_OPTION) {
                        exportProcess(file);
                    }
                }
            }    
        }else{
            
            try {
                CGTreeNode cgTreeNode = (CGTreeNode) treeExportImport.getModel().getRoot();
                processImport(cgTreeNode);
                if(this.canceledProcess) return; 
                CPlatkmContentManager.getInstance().updateConfigFile();
                CPlatkmContentManager.getInstance().getcGeneratorSettings().setLastImportPath(selectedFileFolder);
                CPlatkmContentManager.getInstance().saveSetting();
                tareaResult.append("Import process done \n");
                btnExport.setEnabled(false);
                this.processDone = true;
            } catch (CPlatkmException ex) {
                java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        
    }//GEN-LAST:event_btnExportActionPerformed

    private void processExport(CGTreeNode cgTreeNode){
    
        CGTreeNode cgTreeNodeBaseChild;
        Enumeration<TreeNode> elementos = cgTreeNode.children();
        
        while (elementos.hasMoreElements()) {
            if(this.canceledProcess) break;
            cgTreeNodeBaseChild = (CGTreeNode) elementos.nextElement(); 
            if(cgTreeNodeBaseChild.isSelected()){
                if(TreeNodeTypes.DATABASE_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    cgenetatorConfigExport.getDatabases().add((DatabaseData) cgTreeNodeBaseChild.getUserObject());
                    tareaResult.append("Database data " + ((DatabaseData) cgTreeNodeBaseChild.getUserObject()).getName() + " \n");
                }else if(TreeNodeTypes.DATATYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    cgenetatorConfigExport.getDatatypes().add((DataTypeMapping) cgTreeNodeBaseChild.getUserObject());
                    tareaResult.append("datatye " + ((DataTypeMapping) cgTreeNodeBaseChild.getUserObject()).getName() + " \n");
                }else if(TreeNodeTypes.ARTIFACT_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    Artifact artifactSel = (Artifact) cgTreeNodeBaseChild.getUserObject();
                    Artifact artifact = new Artifact();
                    artifact.setDescription(artifactSel.getDescription());
                    artifact.setFoldername(artifactSel.getFoldername());
                    artifact.setId(artifactSel.getId());
                    artifact.setLabel(artifactSel.getLabel());
                    artifact.setProperties(artifactSel.getProperties());
                    artifact.setTags(artifactSel.getTags());
                    
                    cgenetatorConfigExport.getArtifacts().add(artifact);
                    tareaResult.append("Artifact " + artifact.getLabel() + " \n");
                    
                }else if(TreeNodeTypes.TEMPLATE_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    try {
                        String parentId = cgTreeNodeBaseChild.getParentId();
                        Artifact artifact = this.cgenetatorConfigExport.getArtifacts().stream().filter(a-> a.getId().equals(parentId)).findFirst().orElse(null);
                        
                        Template template = (Template) cgTreeNodeBaseChild.getUserObject();
                        
                        Template templateElemn = new Template();
                        templateElemn.setCode(template.getCode());
                        templateElemn.setDescription(template.getDescription());
                        templateElemn.setFileExtension(template.getFileExtension());
                        templateElemn.setId(template.getId());
                        templateElemn.setLabel(template.getLabel());
                        templateElemn.setOutputFileName(template.getOutputFileName());
                        templateElemn.setPrefix(template.getPrefix());
                        templateElemn.setProperties(template.getProperties());
                        templateElemn.setRewritable(template.isRewritable());
                        templateElemn.setSuffix(template.getSuffix());
                        templateElemn.setTemplatename(template.getTemplatename());
                        templateElemn.setContent(CPlatkmContentManager.getInstance().getTemplateContent(artifact.getFoldername(), template.getTemplatename()));
                        
                        tareaResult.append("Template " + templateElemn.getLabel() + " \n");
                        
                        artifact.getTemplates().add(templateElemn);
                        
                    } catch (CPlatkmException ex) {
                        java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(Level.SEVERE, null, ex);
                        tareaResult.append(ex.getMessage() + " \n");
                        this.canceledProcess = true;
                    }
                
                }else if(TreeNodeTypes.RUN_CONFIGURATION_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    cgenetatorConfigExport.getRunConfigurations().add((RunConfiguration) cgTreeNodeBaseChild.getUserObject());
                }else if(TreeNodeTypes.GLOBAL_DATA_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    cgenetatorConfigExport.getGlobalDatas().add((GlobalData) cgTreeNodeBaseChild.getUserObject());
                }
                
            }
            processExport(cgTreeNodeBaseChild);
        }
    }
    
    
    private void processImport(CGTreeNode cgTreeNode) {
        CGTreeNode cgTreeNodeBaseChild;
        Enumeration<TreeNode> elementos = cgTreeNode.children();
        
        while (elementos.hasMoreElements()) {
           cgTreeNodeBaseChild = (CGTreeNode) elementos.nextElement(); 
            if(cgTreeNodeBaseChild.isSelected()){
                if(TreeNodeTypes.DATABASE_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    DatabaseData databaseData  = (DatabaseData) cgTreeNodeBaseChild.getUserObject();
                    DatabaseData databaseData1 = CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatabases().stream().filter(d->d.getId().equals(databaseData.getId())).findFirst().orElse(null);
                    if(databaseData1 == null){
                        CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatabases().add(databaseData);
                    }else{
                        for (int i = 0; i < CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatabases().size(); i++) {
                            if(CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatabases().get(i).getId().equals(databaseData1.getId())){
                                CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatabases().set(i, databaseData);
                            }
                        }
                    }
                    
                }else if(TreeNodeTypes.DATATYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    DataTypeMapping dataTypeMapping = (DataTypeMapping) cgTreeNodeBaseChild.getUserObject();
                    DataTypeMapping dataTypeMapping1 = CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatatypes().stream().filter(d->d.getId().equals(dataTypeMapping.getId())).findFirst().orElse(null);
                    if(dataTypeMapping1 == null){
                        CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatatypes().add(dataTypeMapping);
                    }else{
                        for (int i = 0; i < CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatatypes().size(); i++) {
                            if(CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatatypes().get(i).getId().equals(dataTypeMapping1.getId())){
                                CPlatkmContentManager.getInstance().getCgenetatorConfig().getDatatypes().set(i, dataTypeMapping);
                            }
                        }
                    }
                    
                }else if(TreeNodeTypes.ARTIFACT_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    Artifact artifactSel = (Artifact) cgTreeNodeBaseChild.getUserObject();
                    artifactSel.getTemplates().clear();
                    Artifact artifact1 = CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().stream().filter(d->d.getId().equals(artifactSel.getId())).findFirst().orElse(null);
                    if(artifact1 == null){
                        CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().add(artifactSel);
                    }else{
                        for (int i = 0; i < CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().size(); i++) {
                            if(CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().get(i).getId().equals(artifact1.getId())){
                                artifact1 = CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().get(i);
                                artifact1.setDescription(artifactSel.getDescription());
                                artifact1.setFoldername(artifactSel.getFoldername());
                                artifact1.setId(artifactSel.getId());
                                artifact1.setLabel(artifactSel.getLabel());
                                artifact1.setProperties(artifactSel.getProperties());
                                artifact1.setTags(artifactSel.getTags());
                                CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().set(i, artifact1);
                            }
                        }
                    }
                    
                }else if(TreeNodeTypes.TEMPLATE_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    String parentId    = cgTreeNodeBaseChild.getParentId();
                    Artifact artifact  = CPlatkmContentManager.getInstance().getCgenetatorConfig().getArtifacts().stream().filter(d->d.getId().equals(parentId)).findFirst().orElse(null);
                    Template template  = (Template) cgTreeNodeBaseChild.getUserObject();
                    Template template1 = artifact.getTemplates().stream().filter(d->d.getId().equals(template.getId())).findFirst().orElse(null);
                    
                    if(template1 == null){
                        try {
                            CPlatkmContentManager.getInstance().createTemplateFile(artifact.getFoldername(), template.getTemplatename());
                            CPlatkmContentManager.getInstance().saveTemplateContent(artifact.getFoldername(), template.getTemplatename(), template.getContent());
                            template.setContent(null);
                            artifact.getTemplates().add(template);
                        } catch (CPlatkmException ex) {
                            java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Import", JOptionPane.ERROR_MESSAGE);
                        }
                    }else{
                        try {
                            CPlatkmContentManager.getInstance().saveTemplateContent(artifact.getFoldername(), template.getTemplatename(), template.getContent());
                            
                            for (int i = 0; i < artifact.getTemplates().size(); i++) {
                                if(artifact.getTemplates().get(i).getId().equals(template.getId())){
                                    
                                    artifact.getTemplates().set(i, template);
                                    CPlatkmContentManager.getInstance().saveTemplateContent(artifact.getFoldername(), template.getTemplatename(), template.getContent());
                                    template.setContent(null);
                                }
                            }
                            
                        } catch (CPlatkmException ex) {
                            java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(Level.SEVERE, null, ex); java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Import", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
                     
                }else if(TreeNodeTypes.RUN_CONFIGURATION_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    RunConfiguration runConfiguration  = (RunConfiguration) cgTreeNodeBaseChild.getUserObject();
                    RunConfiguration runConfiguration1 = CPlatkmContentManager.getInstance().getCgenetatorConfig().getRunConfigurations().stream().filter(d->d.getId().equals(runConfiguration.getId())).findFirst().orElse(null);
                    if(runConfiguration1 == null){
                        CPlatkmContentManager.getInstance().getCgenetatorConfig().getRunConfigurations().add(runConfiguration);
                    }else{
                        for (int i = 0; i < CPlatkmContentManager.getInstance().getCgenetatorConfig().getRunConfigurations().size(); i++) {
                            if(CPlatkmContentManager.getInstance().getCgenetatorConfig().getRunConfigurations().get(i).getId().equals(runConfiguration1.getId())){
                                CPlatkmContentManager.getInstance().getCgenetatorConfig().getRunConfigurations().set(i, runConfiguration);
                            }
                        }
                    }
                    
                }else if(TreeNodeTypes.GLOBAL_DATA_TYPE.name().equals(cgTreeNodeBaseChild.getType())){
                    
                    GlobalData globalData  = (GlobalData) cgTreeNodeBaseChild.getUserObject();
                    GlobalData globalData1 = CPlatkmContentManager.getInstance().getCgenetatorConfig().getGlobalDatas().stream().filter(d->d.getId().equals(globalData.getId())).findFirst().orElse(null);
                    if(globalData1 == null){
                        CPlatkmContentManager.getInstance().getCgenetatorConfig().getGlobalDatas().add(globalData);
                    }else{
                        for (int i = 0; i < CPlatkmContentManager.getInstance().getCgenetatorConfig().getGlobalDatas().size(); i++) {
                            if(CPlatkmContentManager.getInstance().getCgenetatorConfig().getGlobalDatas().get(i).getId().equals(globalData1.getId())){
                                CPlatkmContentManager.getInstance().getCgenetatorConfig().getGlobalDatas().set(i, globalData);
                            }
                        }
                    }
                    
                }
                
            }
            processImport(cgTreeNodeBaseChild);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExportJDialog dialog = new ExportJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnExport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea tareaResult;
    private javax.swing.JTree treeExportImport;
    // End of variables declaration//GEN-END:variables

    public void openAction(ExportImportEnum pexportImportEnum, CGenetatorConfig cgenetatorConfig, File selectedFile ) {
         
        this.selectedFileFolder = selectedFile.getParent();
        
        tareaResult.setText("");
        this.exportImportEnum = pexportImportEnum;
        this.cgenetatorConfigCurrent = cgenetatorConfig;
        this.cgenetatorConfigExport = new CGenetatorConfig();
        this.canceledProcess = false;
        btnExport.setEnabled(true);
        this.processDone = false;
        
        DefaultTreeModel model = new DefaultTreeModel(MainTreeCreator.getInstance().create(this.cgenetatorConfigCurrent, (Object userObject, String nodeType, String name, String id) -> {
            return new CGTreeNode(userObject, nodeType, name, id );
        }));
        treeExportImport.setModel(model);

        // Asignar el renderer y el editor al árbol
        treeExportImport.setCellRenderer(new CheckBoxNodeRenderer());
        treeExportImport.setCellEditor(new CheckBoxNodeEditor());
        treeExportImport.setEditable(true);
        
        if(exportImportEnum.name().equals(ExportImportEnum.EXPORT.name())){
            setTitle("Export");
            btnExport.setText("Export...");
        }else  {
            setTitle("Import");
            btnExport.setText("Import...");
        }
    }

    private void exportProcess(File file) {
        try {
           
            String strJson = JsonUtil.objectToJson(this.cgenetatorConfigExport );
            FileUtils.write(file, strJson, "UTF-8");
            
            CPlatkmContentManager.getInstance().getcGeneratorSettings().setLastExportPath(file.getParent());
            CPlatkmContentManager.getInstance().saveSetting();
 
            JOptionPane.showMessageDialog(this,
                        "File exported",
                        "Export", JOptionPane.INFORMATION_MESSAGE);

        } catch (JsonException | IOException ex) {
            logger.error(ex.getMessage());

            JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        "Export", JOptionPane.ERROR_MESSAGE);
        }
    }


}
